#METHOD USED
#Serialization converts a Protobuf message object into a byte string,
AND SENT TO NOTIFICATION SERVICE

from .model import NotificationPayload, Order
from aiokafka import AIOKafkaProducer
from .order_pb2 import NotificationPayloadProto, OrderProto
from .settings import settings
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def send_order_status_notification(
        payload: Order, 
        producer: AIOKafkaProducer,
        topic: str = settings.TOPIC_ORDER_STATUS):
    await producer.start()
    try:
        payload_proto = OrderProto(
            item_name=payload.item_name,
            quantity=payload.quantity,
            price=payload.price,
            status=payload.status
        )
        order_status_message = payload_proto.SerializeToString() #converts the Protobuf message object into a byte string
        await producer.send_and_wait(topic, order_status_message)
        logging.info(
            f"NOTIFICATION_SENT_TO_NOTIFICATION_SERVICE:\n"
            f"ORDER_STATUS: {payload.status}\n"
            f"ORDER_DETAILS:\n"
            f"ITEM: {payload.item_name}\n"
            f"QUANTITY: {payload.quantity}\n"
            f"PRICE: {payload.price}"
        )
    finally:
        await producer.stop()
